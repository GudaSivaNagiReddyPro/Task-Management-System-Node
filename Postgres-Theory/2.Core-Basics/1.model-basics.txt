Model Basics

Models are the essence of Sequelize. A model is an abstraction that represents a table in your database. 
In Sequelize, it is a class that extends Model.

The model tells Sequelize several things about the entity it represents, such as the name of the table in the database and which columns it has (and their data types).

A model in Sequelize has a name. This name does not have to be the same name of the table it represents in the database. 
Usually, models have singular names (such as User) while tables have pluralized names (such as Users), although this is fully configurable.

Model Definition

Models can be defined in two equivalent ways in Sequelize:
  - Calling sequelize.define(modelName, attributes, options)
  - Extending Model and calling init(attributes, options)

After a model is defined, it is available within sequelize.models by its model name.

To learn with an example, we will consider that we want to create a model to represent users, which have a firstName and a lastName. 
We want our model to be called User, and the table it represents is called Users in the database.

Both ways to define this model are shown below. After being defined, we can access our model with sequelize.models.User.

1.Use sequelize.define:

const { Sequelize, DataTypes } = require('sequelize');
const sequelize = new Sequelize('sqlite::memory:');

const User = sequelize.define(
  'User',
  {
    // Model attributes are defined here
    firstName: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    lastName: {
      type: DataTypes.STRING,
      // allowNull defaults to true
    },
  },
  {
    // Other model options go here
  },
);

// `sequelize.define` also returns the model
console.log(User === sequelize.models.User); // true

2.Extending Model

const { Sequelize, DataTypes, Model } = require('sequelize');
const sequelize = new Sequelize('sqlite::memory:');

class User extends Model {}

User.init(
  {
    // Model attributes are defined here
    firstName: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    lastName: {
      type: DataTypes.STRING,
      // allowNull defaults to true
    },
  },
  {
    // Other model options go here
    sequelize, // We need to pass the connection instance
    modelName: 'User', // We need to choose the model name
  },
);

// the defined model is the class itself
console.log(User === sequelize.models.User); // true


Enforcing the table name to be equal to the model name

You can stop the auto-pluralization performed by Sequelize using the freezeTableName: true option. This way, 
Sequelize will infer the table name to be equal to the model name, without any modifications:

sequelize.define(
  'User',
  {
    // ... (attributes)
  },
  {
    freezeTableName: true,
  },
);

Providing the table name directly

You can simply tell Sequelize the name of the table directly as well:

sequelize.define(
  'User',
  {
    // ... (attributes)
  },
  {
    tableName: 'Employees',
  },
);


Model synchronization
When you define a model, you're telling Sequelize a few things about its table in the database. 
However, what if the table actually doesn't even exist in the database? What if it exists, 
but it has different columns, less columns, or any other difference?

This is where model synchronization comes in. A model can be synchronized with the database by calling model.sync(options), 
an asynchronous function (that returns a Promise). With this call, Sequelize will automatically perform an SQL query to the database. 
Note that this changes only the table in the database, not the model in the JavaScript side.

    - User.sync() - This creates the table if it doesn't exist (and does nothing if it already exists)
    - User.sync({ force: true }) - This creates the table, dropping it first if it already existed
    - User.sync({ alter: true }) - This checks what is the current state of the table in the database (which columns it has, what are their data types, etc), 
      and then performs the necessary changes in the table to make it match the model.

Dropping tables:
    To drop the table related to a model:

    await User.drop();
    console.log('User table dropped!');

    To drop all tables:

    await sequelize.drop();
    console.log('All tables dropped!');

Synchronization in production
    As shown above, sync({ force: true }) and sync({ alter: true }) can be destructive operations. Therefore, they are not recommended for production-level software. Instead, 
    synchronization should be done with the advanced concept of Migrations, with the help of the Sequelize CLI.

Timestamps: 

    By default, Sequelize automatically adds the fields createdAt and updatedAt to every model, using the data type DataTypes.DATE. 
    Those fields are automatically managed as well - whenever you use Sequelize to create or update something, those fields will be set correctly. 
    The createdAt field will contain the timestamp representing the moment of creation, and the updatedAt will contain the timestamp of the latest update.

    Note: This is done in the Sequelize level (i.e. not done with SQL triggers). This means that direct SQL queries 
    (for example queries performed without Sequelize by any other means) will not cause these fields to be updated automatically.

    This behavior can be disabled for a model with the timestamps: false option:

        sequelize.define(
        'User',
        {
            // ... (attributes)
        },
        {
            timestamps: false,
        },
        );
    It is also possible to enable only one of createdAt/updatedAt, and to provide a custom name for these columns:

    class Foo extends Model {}
    Foo.init(
    {
        /* attributes */
    },
    {
        sequelize,

        // don't forget to enable timestamps!
        timestamps: true,

        // I don't want createdAt
        createdAt: false,

        // I want updatedAt to actually be called updateTimestamp
        updatedAt: 'updateTimestamp',
    },
    );

Default Values: 

    By default, Sequelize assumes that the default value of a column is NULL. 
    This behavior can be changed by passing a specific defaultValue to the column definition:

    sequelize.define('User', {
    name: {
        type: DataTypes.STRING,
        defaultValue: 'John Doe',
    },
    });

    Some special values, such as DataTypes.NOW, are also accepted:

    sequelize.define('Foo', {
    bar: {
        type: DataTypes.DATETIME,
        defaultValue: DataTypes.NOW,
        // This way, the current date/time will be used to populate this column (at the moment of insertion)
    },
    })