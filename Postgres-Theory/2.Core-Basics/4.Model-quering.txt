Model Querying - Basics: 

    Sequelize provides various methods to assist querying your database for data.

    Important notice: to perform production-ready queries with Sequelize, make sure you have read the Transactions guide as well. Transactions are important to ensure data integrity and to provide other benefits.

    This guide will show how to make the standard CRUD queries.

    Simple INSERT queries
    First, a simple example:

    // Create a new user
    const jane = await User.create({ firstName: 'Jane', lastName: 'Doe' });
    console.log("Jane's auto-generated ID:", jane.id);

    The Model.create() method is a shorthand for building an unsaved instance with Model.build() and saving the instance with instance.save().
    
----------------------------------------------------------------------------------

  project/src/controller/user.controller.js/ sign-up function

----------------------------------------------------------------------------------

    It is also possible to define which attributes can be set in the create method.
    This can be especially useful if you create database entries based on a form which can be filled by a user. 
    Using that would, for example, allow you to restrict the User model to set only an username but not an admin flag (i.e., isAdmin):

    const user = await User.create(
    {
        username: 'alice123',
        isAdmin: true,
    },
    { fields: ['username'] },
    );
    // let's assume the default of isAdmin is false
    console.log(user.username); // 'alice123'
    console.log(user.isAdmin); // false

----------------------------------------------------------------------------------

  project/src/controller/task.controller.js/ fetchAllTasks function

----------------------------------------------------------------------------------

Simple SELECT queries: 

    You can read the whole table from the database with the findAll method:

    // Find all users
    const users = await User.findAll();
    console.log(users.every(user => user instanceof User)); // true
    console.log('All users:', JSON.stringify(users, null, 2));

    SELECT * FROM ...

    Specifying attributes for SELECT queries
    To select only some attributes, you can use the attributes option:

    Model.findAll({
    attributes: ['foo', 'bar'],
    });

    SELECT foo, bar FROM ...

    Attributes can be renamed using a nested array:

    Model.findAll({
    attributes: ['foo', ['bar', 'baz'], 'qux'],
    });

    SELECT foo, bar AS baz, qux FROM ...

You can use sequelize.fn to do aggregations:

    Model.findAll({
    attributes: ['foo', [sequelize.fn('COUNT', sequelize.col('hats')), 'n_hats'], 'bar'],
    });

    SELECT foo, COUNT(hats) AS n_hats, bar FROM ...

    When using aggregation function, you must give it an alias to be able to access it from the model. In the example above you can get the number of hats with instance.n_hats.

    Sometimes it may be tiresome to list all the attributes of the model if you only want to add an aggregation:

    // This is a tiresome way of getting the number of hats (along with every column)
    Model.findAll({
    attributes: [
        'id',
        'foo',
        'bar',
        'baz',
        'qux',
        'hats', // We had to list all attributes...
        [sequelize.fn('COUNT', sequelize.col('hats')), 'n_hats'], // To add the aggregation...
    ],
    });

    // This is shorter, and less error prone because it still works if you add / remove attributes from your model later
    Model.findAll({
    attributes: {
        include: [[sequelize.fn('COUNT', sequelize.col('hats')), 'n_hats']],
    },
    });


    SELECT id, foo, bar, baz, qux, hats, COUNT(hats) AS n_hats FROM ...

    Similarly, it's also possible to remove a selected few attributes:

    Model.findAll({
    attributes: { exclude: ['baz'] },
    });

    -- Assuming all columns are 'id', 'foo', 'bar', 'baz' and 'qux'
    SELECT id, foo, bar, qux FROM ...


Applying WHERE clauses : 

    The where option is used to filter the query. There are lots of operators to use for the where clause, available as Symbols from Op.

    The basics
    Post.findAll({
    where: {
        authorId: 2,
    },
    });
    // SELECT * FROM post WHERE authorId = 2;

    Observe that no operator (from Op) was explicitly passed, so Sequelize assumed an equality comparison by default. The above code is equivalent to:

    const { Op } = require('sequelize');
    Post.findAll({
    where: {
        authorId: {
        [Op.eq]: 2,
        },
    },
    });
    // SELECT * FROM post WHERE authorId = 2;

Multiple checks can be passed:

    Post.findAll({
    where: {
        authorId: 12,
        status: 'active',
    },
    });
    // SELECT * FROM post WHERE authorId = 12 AND status = 'active';        

    Just like Sequelize inferred the Op.eq operator in the first example, here Sequelize inferred that the caller wanted an AND for the two checks. The code above is equivalent to:

    const { Op } = require('sequelize');
    Post.findAll({
    where: {
        [Op.and]: [{ authorId: 12 }, { status: 'active' }],
    },
    });
    // SELECT * FROM post WHERE authorId = 12 AND status = 'active';

An OR can be easily performed in a similar way:

    const { Op } = require('sequelize');
    Post.findAll({
    where: {
        [Op.or]: [{ authorId: 12 }, { authorId: 13 }],
    },
    });
    // SELECT * FROM post WHERE authorId = 12 OR authorId = 13;

    Since the above was an OR involving the same field, Sequelize allows you to use a slightly different structure which is more readable and generates the same behavior:

    const { Op } = require('sequelize');
    Post.destroy({
    where: {
        authorId: {
        [Op.or]: [12, 13],
        },
    },
    });
    // DELETE FROM post WHERE authorId = 12 OR authorId = 13;